{
  "address": "0xd7A029Db2585553978190dB5E85eC724Aa4dF23f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_unlockBegin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockCliff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "claimableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockBegin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockCliff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x434dd61f2e2fbd79670c4f6f8f7f14cf2696916a8564b9796a13000b8858e2c9",
  "receipt": {
    "to": null,
    "from": "0x0904Dac3347eA47d208F3Fd67402D039a3b99859",
    "contractAddress": "0xd7A029Db2585553978190dB5E85eC724Aa4dF23f",
    "transactionIndex": 128,
    "gasUsed": "788033",
    "logsBloom": "0x
    "blockHash": "0xb873863cb220b8dd808c1ae9700cc2a39691d10cc33675c780adc4615e932e20",
    "transactionHash": "0x434dd61f2e2fbd79670c4f6f8f7f14cf2696916a8564b9796a13000b8858e2c9",
    "logs": [],
    "blockNumber": 13533517,
    "cumulativeGasUsed": "10952089",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72",
    1635984000,
    1651622400,
    1762214400
  ],
  "solcInputHash": "663078e3b2c4926632082f376a43cc4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unlockBegin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockBegin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockCliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Time-locks tokens according to an unlock schedule.\",\"kind\":\"dev\",\"methods\":{\"claim(address,uint256)\":{\"details\":\"Claims the caller's tokens that have been unlocked, sending them to `recipient`.\",\"params\":{\"amount\":\"The amount to transfer. If greater than the claimable amount, the maximum is transferred.\",\"recipient\":\"The account to transfer unlocked tokens to.\"}},\"claimableBalance(address)\":{\"details\":\"Returns the maximum number of tokens currently claimable by `owner`.\",\"params\":{\"owner\":\"The account to check the claimable balance of.\"},\"returns\":{\"_0\":\"The number of tokens currently claimable.\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_token\":\"The token this contract will lock.l\",\"_unlockBegin\":\"The time at which unlocking of tokens will be gin.\",\"_unlockCliff\":\"The first time at which tokens are claimable.\",\"_unlockEnd\":\"The time at which the last token will unlock.\"}},\"lock(address,uint256)\":{\"details\":\"Transfers tokens from the caller to the token lock contract and locks them for benefit of `recipient`.      Requires that the caller has authorised this contract with the token contract.\",\"params\":{\"amount\":\"The number of tokens to transfer and lock.\",\"recipient\":\"The account the tokens will be claimable by.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenLock.sol\":\"TokenLock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/TokenLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @dev Time-locks tokens according to an unlock schedule.\\n */\\ncontract TokenLock {\\n    ERC20 public immutable token;\\n    uint256 public immutable unlockBegin;\\n    uint256 public immutable unlockCliff;\\n    uint256 public immutable unlockEnd;\\n\\n    mapping(address=>uint256) public lockedAmounts;\\n    mapping(address=>uint256) public claimedAmounts;\\n\\n    event Locked(address indexed sender, address indexed recipient, uint256 amount);\\n    event Claimed(address indexed owner, address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _token The token this contract will lock.l\\n     * @param _unlockBegin The time at which unlocking of tokens will be gin.\\n     * @param _unlockCliff The first time at which tokens are claimable.\\n     * @param _unlockEnd The time at which the last token will unlock.\\n     */\\n    constructor(ERC20 _token, uint256 _unlockBegin, uint256 _unlockCliff, uint256 _unlockEnd) {\\n        require(_unlockCliff >= _unlockBegin, \\\"ERC20Locked: Unlock cliff must not be before unlock begin\\\");\\n        require(_unlockEnd >= _unlockCliff, \\\"ERC20Locked: Unlock end must not be before unlock cliff\\\");\\n        token = _token;\\n        unlockBegin = _unlockBegin;\\n        unlockCliff = _unlockCliff;\\n        unlockEnd = _unlockEnd;\\n    }\\n\\n    /**\\n     * @dev Returns the maximum number of tokens currently claimable by `owner`.\\n     * @param owner The account to check the claimable balance of.\\n     * @return The number of tokens currently claimable.\\n     */\\n    function claimableBalance(address owner) public view returns(uint256) {\\n        if(block.timestamp < unlockCliff) {\\n            return 0;\\n        }\\n\\n        uint256 locked = lockedAmounts[owner];\\n        uint256 claimed = claimedAmounts[owner];\\n        if(block.timestamp >= unlockEnd) {\\n            return locked - claimed;\\n        }\\n        return (locked * (block.timestamp - unlockBegin)) / (unlockEnd - unlockBegin) - claimed;\\n    }\\n\\n    /**\\n     * @dev Transfers tokens from the caller to the token lock contract and locks them for benefit of `recipient`.\\n     *      Requires that the caller has authorised this contract with the token contract.\\n     * @param recipient The account the tokens will be claimable by.\\n     * @param amount The number of tokens to transfer and lock.\\n     */\\n    function lock(address recipient, uint256 amount) external {\\n        require(block.timestamp < unlockEnd, \\\"TokenLock: Unlock period already complete\\\");\\n        lockedAmounts[recipient] += amount;\\n        require(token.transferFrom(msg.sender, address(this), amount), \\\"TokenLock: Transfer failed\\\");\\n        emit Locked(msg.sender, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Claims the caller's tokens that have been unlocked, sending them to `recipient`.\\n     * @param recipient The account to transfer unlocked tokens to.\\n     * @param amount The amount to transfer. If greater than the claimable amount, the maximum is transferred.\\n     */\\n    function claim(address recipient, uint256 amount) external {\\n        uint256 claimable = claimableBalance(msg.sender);\\n        if(amount > claimable) {\\n            amount = claimable;\\n        }\\n        claimedAmounts[msg.sender] += amount;\\n        require(token.transfer(recipient, amount), \\\"TokenLock: Transfer failed\\\");\\n        emit Claimed(msg.sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x988c9ef654dfb568afa7bb6734fab9624854e25308e401a435666704227ef971\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200111d3803806200111d83398181016040528101906200003891906200014b565b828210156200007e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000075906200022d565b60405180910390fd5b81811015620000c4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000bb906200020b565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260a081815250508160c081815250508060e081815250505050505062000389565b6000815190506200012e8162000355565b92915050565b60008151905062000145816200036f565b92915050565b60008060008060808587031215620001685762000167620002b2565b5b600062000178878288016200011d565b94505060206200018b8782880162000134565b93505060406200019e8782880162000134565b9250506060620001b18782880162000134565b91505092959194509250565b6000620001cc6037836200024f565b9150620001d982620002b7565b604082019050919050565b6000620001f36039836200024f565b9150620002008262000306565b604082019050919050565b600060208201905081810360008301526200022681620001bd565b9050919050565b600060208201905081810360008301526200024881620001e4565b9050919050565b600082825260208201905092915050565b60006200026d8262000288565b9050919050565b6000620002818262000260565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b7f45524332304c6f636b65643a20556e6c6f636b20656e64206d757374206e6f7460008201527f206265206265666f726520756e6c6f636b20636c696666000000000000000000602082015250565b7f45524332304c6f636b65643a20556e6c6f636b20636c696666206d757374206e60008201527f6f74206265206265666f726520756e6c6f636b20626567696e00000000000000602082015250565b620003608162000274565b81146200036c57600080fd5b50565b6200037a81620002a8565b81146200038657600080fd5b50565b60805160601c60a05160c05160e051610d1f620003fe600039600081816101fe015281816104c60152818161052401526107bd01526000818161040e01526105bc0152600081816101da01528181610503015261054f0152600081816102b50152818161066701526107e10152610d1f6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063904c66ec11610066578063904c66ec14610132578063a8c7a08a14610150578063aad3ec9614610180578063e6e25d101461019c578063fc0c546a146101ba57610093565b8063239fd61114610098578063282d3fdf146100b657806360f3309b146100d257806371417b3214610102575b600080fd5b6100a06101d8565b6040516100ad9190610a0a565b60405180910390f35b6100d060048036038101906100cb919061086f565b6101fc565b005b6100ec60048036038101906100e79190610842565b61040a565b6040516100f99190610a0a565b60405180910390f35b61011c60048036038101906101179190610842565b6105a2565b6040516101299190610a0a565b60405180910390f35b61013a6105ba565b6040516101479190610a0a565b60405180910390f35b61016a60048036038101906101659190610842565b6105de565b6040516101779190610a0a565b60405180910390f35b61019a6004803603810190610195919061086f565b6105f6565b005b6101a46107bb565b6040516101b19190610a0a565b60405180910390f35b6101c26107df565b6040516101cf91906109af565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f0000000000000000000000000000000000000000000000000000000000000000421061025e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610255906109ca565b60405180910390fd5b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ac9190610a36565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016103109392919061094f565b602060405180830381600087803b15801561032a57600080fd5b505af115801561033e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036291906108af565b6103a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610398906109ea565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f989eaa915cbb416ea3d6f9a63b1a3de51770c7674b11fe21ecdf76b4e1d13910836040516103fe9190610a0a565b60405180910390a35050565b60007f000000000000000000000000000000000000000000000000000000000000000042101561043d576000905061059d565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490507f000000000000000000000000000000000000000000000000000000000000000042106105005780826104f79190610b17565b9250505061059d565b807f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061054d9190610b17565b7f0000000000000000000000000000000000000000000000000000000000000000426105799190610b17565b846105849190610abd565b61058e9190610a8c565b6105989190610b17565b925050505b919050565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020528060005260406000206000915090505481565b60006106013361040a565b90508082111561060f578091505b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461065e9190610a36565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b81526004016106c0929190610986565b602060405180830381600087803b1580156106da57600080fd5b505af11580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071291906108af565b610751576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610748906109ea565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683846040516107ae9190610a0a565b60405180910390a3505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008135905061081281610ca4565b92915050565b60008151905061082781610cbb565b92915050565b60008135905061083c81610cd2565b92915050565b60006020828403121561085857610857610c27565b5b600061086684828501610803565b91505092915050565b6000806040838503121561088657610885610c27565b5b600061089485828601610803565b92505060206108a58582860161082d565b9150509250929050565b6000602082840312156108c5576108c4610c27565b5b60006108d384828501610818565b91505092915050565b6108e581610b4b565b82525050565b6108f481610b93565b82525050565b6000610907602983610a25565b915061091282610c2c565b604082019050919050565b600061092a601a83610a25565b915061093582610c7b565b602082019050919050565b61094981610b89565b82525050565b600060608201905061096460008301866108dc565b61097160208301856108dc565b61097e6040830184610940565b949350505050565b600060408201905061099b60008301856108dc565b6109a86020830184610940565b9392505050565b60006020820190506109c460008301846108eb565b92915050565b600060208201905081810360008301526109e3816108fa565b9050919050565b60006020820190508181036000830152610a038161091d565b9050919050565b6000602082019050610a1f6000830184610940565b92915050565b600082825260208201905092915050565b6000610a4182610b89565b9150610a4c83610b89565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a8157610a80610bc9565b5b828201905092915050565b6000610a9782610b89565b9150610aa283610b89565b925082610ab257610ab1610bf8565b5b828204905092915050565b6000610ac882610b89565b9150610ad383610b89565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b0c57610b0b610bc9565b5b828202905092915050565b6000610b2282610b89565b9150610b2d83610b89565b925082821015610b4057610b3f610bc9565b5b828203905092915050565b6000610b5682610b69565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b9e82610ba5565b9050919050565b6000610bb082610bb7565b9050919050565b6000610bc282610b69565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b7f546f6b656e4c6f636b3a20556e6c6f636b20706572696f6420616c726561647960008201527f20636f6d706c6574650000000000000000000000000000000000000000000000602082015250565b7f546f6b656e4c6f636b3a205472616e73666572206661696c6564000000000000600082015250565b610cad81610b4b565b8114610cb857600080fd5b50565b610cc481610b5d565b8114610ccf57600080fd5b50565b610cdb81610b89565b8114610ce657600080fd5b5056fea26469706673582212202e966fc63dd1e9f2534cbcfed6906b70e38e97256d27ebf82b4d102e6228a51764736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063904c66ec11610066578063904c66ec14610132578063a8c7a08a14610150578063aad3ec9614610180578063e6e25d101461019c578063fc0c546a146101ba57610093565b8063239fd61114610098578063282d3fdf146100b657806360f3309b146100d257806371417b3214610102575b600080fd5b6100a06101d8565b6040516100ad9190610a0a565b60405180910390f35b6100d060048036038101906100cb919061086f565b6101fc565b005b6100ec60048036038101906100e79190610842565b61040a565b6040516100f99190610a0a565b60405180910390f35b61011c60048036038101906101179190610842565b6105a2565b6040516101299190610a0a565b60405180910390f35b61013a6105ba565b6040516101479190610a0a565b60405180910390f35b61016a60048036038101906101659190610842565b6105de565b6040516101779190610a0a565b60405180910390f35b61019a6004803603810190610195919061086f565b6105f6565b005b6101a46107bb565b6040516101b19190610a0a565b60405180910390f35b6101c26107df565b6040516101cf91906109af565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f0000000000000000000000000000000000000000000000000000000000000000421061025e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610255906109ca565b60405180910390fd5b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ac9190610a36565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016103109392919061094f565b602060405180830381600087803b15801561032a57600080fd5b505af115801561033e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036291906108af565b6103a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610398906109ea565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f989eaa915cbb416ea3d6f9a63b1a3de51770c7674b11fe21ecdf76b4e1d13910836040516103fe9190610a0a565b60405180910390a35050565b60007f000000000000000000000000000000000000000000000000000000000000000042101561043d576000905061059d565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490507f000000000000000000000000000000000000000000000000000000000000000042106105005780826104f79190610b17565b9250505061059d565b807f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061054d9190610b17565b7f0000000000000000000000000000000000000000000000000000000000000000426105799190610b17565b846105849190610abd565b61058e9190610a8c565b6105989190610b17565b925050505b919050565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020528060005260406000206000915090505481565b60006106013361040a565b90508082111561060f578091505b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461065e9190610a36565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b81526004016106c0929190610986565b602060405180830381600087803b1580156106da57600080fd5b505af11580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071291906108af565b610751576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610748906109ea565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683846040516107ae9190610a0a565b60405180910390a3505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008135905061081281610ca4565b92915050565b60008151905061082781610cbb565b92915050565b60008135905061083c81610cd2565b92915050565b60006020828403121561085857610857610c27565b5b600061086684828501610803565b91505092915050565b6000806040838503121561088657610885610c27565b5b600061089485828601610803565b92505060206108a58582860161082d565b9150509250929050565b6000602082840312156108c5576108c4610c27565b5b60006108d384828501610818565b91505092915050565b6108e581610b4b565b82525050565b6108f481610b93565b82525050565b6000610907602983610a25565b915061091282610c2c565b604082019050919050565b600061092a601a83610a25565b915061093582610c7b565b602082019050919050565b61094981610b89565b82525050565b600060608201905061096460008301866108dc565b61097160208301856108dc565b61097e6040830184610940565b949350505050565b600060408201905061099b60008301856108dc565b6109a86020830184610940565b9392505050565b60006020820190506109c460008301846108eb565b92915050565b600060208201905081810360008301526109e3816108fa565b9050919050565b60006020820190508181036000830152610a038161091d565b9050919050565b6000602082019050610a1f6000830184610940565b92915050565b600082825260208201905092915050565b6000610a4182610b89565b9150610a4c83610b89565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a8157610a80610bc9565b5b828201905092915050565b6000610a9782610b89565b9150610aa283610b89565b925082610ab257610ab1610bf8565b5b828204905092915050565b6000610ac882610b89565b9150610ad383610b89565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b0c57610b0b610bc9565b5b828202905092915050565b6000610b2282610b89565b9150610b2d83610b89565b925082821015610b4057610b3f610bc9565b5b828203905092915050565b6000610b5682610b69565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b9e82610ba5565b9050919050565b6000610bb082610bb7565b9050919050565b6000610bc282610b69565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b7f546f6b656e4c6f636b3a20556e6c6f636b20706572696f6420616c726561647960008201527f20636f6d706c6574650000000000000000000000000000000000000000000000602082015250565b7f546f6b656e4c6f636b3a205472616e73666572206661696c6564000000000000600082015250565b610cad81610b4b565b8114610cb857600080fd5b50565b610cc481610b5d565b8114610ccf57600080fd5b50565b610cdb81610b89565b8114610ce657600080fd5b5056fea26469706673582212202e966fc63dd1e9f2534cbcfed6906b70e38e97256d27ebf82b4d102e6228a51764736f6c63430008070033",
  "devdoc": {
    "details": "Time-locks tokens according to an unlock schedule.",
    "kind": "dev",
    "methods": {
      "claim(address,uint256)": {
        "details": "Claims the caller's tokens that have been unlocked, sending them to `recipient`.",
        "params": {
          "amount": "The amount to transfer. If greater than the claimable amount, the maximum is transferred.",
          "recipient": "The account to transfer unlocked tokens to."
        }
      },
      "claimableBalance(address)": {
        "details": "Returns the maximum number of tokens currently claimable by `owner`.",
        "params": {
          "owner": "The account to check the claimable balance of."
        },
        "returns": {
          "_0": "The number of tokens currently claimable."
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_token": "The token this contract will lock.l",
          "_unlockBegin": "The time at which unlocking of tokens will be gin.",
          "_unlockCliff": "The first time at which tokens are claimable.",
          "_unlockEnd": "The time at which the last token will unlock."
        }
      },
      "lock(address,uint256)": {
        "details": "Transfers tokens from the caller to the token lock contract and locks them for benefit of `recipient`.      Requires that the caller has authorised this contract with the token contract.",
        "params": {
          "amount": "The number of tokens to transfer and lock.",
          "recipient": "The account the tokens will be claimable by."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12041,
        "contract": "contracts/TokenLock.sol:TokenLock",
        "label": "lockedAmounts",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12045,
        "contract": "contracts/TokenLock.sol:TokenLock",
        "label": "claimedAmounts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}